#ifndef AGENDAUI_H
#define AGENDAUI_H

#include "AgendaService.hpp"
#include <iostream>
#include <string>

class AgendaUI {
   public:
    AgendaUI();
    void OperationLoop(void);

   private:
    /**
     * constructor
     */
    void startAgenda(void);

    /**
     * catch user's operation
     * @return the operation
     */
    std::string getOperation();

    /**
     * execute the operation
     * @return if the operationloop continue
     */
    bool executeOperation(std::string t_operation);

    /**
     * user Login
     */
    void userLogIn(void);

    /**
     * user regist
     */
    void userRegister(void);

    /**
     * user logout
     */
    void userLogOut(void);

    /**
     * quit the Agenda
     */
    void quitAgenda(void);

    /**
     * delete a user from storage
     */
    void deleteUser(void);

    /**
     * list all users from storage
     */
    void listAllUsers(void);

    /**
     * user create a meeting with someone else
     */
    void createMeeting(void);

    /**
     * list all meetings from storage
     */
    void listAllMeetings(void);

    /**
     * list all meetings that this user sponsored
     */
    void listAllSponsorMeetings(void);

    /**
     * list all meetings that this user take part in
     */
    void listAllParticipateMeetings(void);

    /**
     * search meetings by title from storage
     */
    void queryMeetingByTitle(void);

    /**
     * search meetings by timeinterval from storage
     */
    void queryMeetingByTimeInterval(void);

    /**
     * delete meetings by title from storage
     */
    void deleteMeetingByTitle(void);

    /**
     * delete all meetings that this user sponsored
     */
    void deleteAllMeetings(void);

    /**
     * show the meetings in the screen
     */
    void printMeetings(std::list<Meeting> t_meetings);
    // dates
    std::string m_userName;
    std::string m_userPassword;
    AgendaService m_agendaService;
};

#endif







#include "../include/AgendaUI.hpp"
#include<iostream>
#include<string>
#include<vector>
#include<iomanip>
using namespace std;

AgendaUI::AgendaUI()
{
    startAgenda();
}

void AgendaUI::OperationLoop(void)
{
    string operation;
    do{
        cout << "--------------------------------Agenda------------------------------------" << endl
             << "Action: " << endl
             << "l  - log in Agenda by user name and password" << endl
             << "r  - register an Agenda account" << endl
             << "q  - quit Agenda" << endl
             << "--------------------------------------------------------------------------" << endl
             << endl << "Agenda :~$ ";
        cin >> operation;
        switch(operation[0])
        {
        case 'l':
            userLogIn();
            break;
        case 'r':
            userRegister();
            break;
        case 'q':
            quitAgenda();
            break;
        default:
            break;
        }
    }while(operation[0] != 'q');

}

void AgendaUI::startAgenda(void)
{
    m_agendaService.startAgenda();
}

string AgendaUI::getOperation()
{
    string operation;
    cout << "--------------------------------Agenda------------------------------------" << endl
         << "Action: " << endl
         << "o   - log out Agenda" << endl
         << "dc  - delete Agenda account" << endl
         << "lu  - list all Agenda user" << endl
         << "cm  - createe a meeting" << endl
         << "amp  - add meeting participator" << endl
         << "rmp  - request to quit meeting" << endl
         << "la  - list all meetings" << endl
         << "las  - list all sponsor meetings" << endl
         << "lap  - list all participator meetings" << endl
         << "qm  - query meeting by title" << endl
         << "qt  - query meeting by time interval" << endl
         << "dm  - delete meeting by title" << endl
         << "da  - delete all meetings" << endl
         << "--------------------------------------------------------------------------" << endl
         << endl << "Agenda@" << m_userName << " :~# ";
    cin >> operation;
    return operation;
}

bool AgendaUI::executeOperation(string op)
{
    if(op == "o")
    {
        userLogOut();
        return false;
    }
    else if(op == "dc")
    {
        deleteUser();
        return false;
    }
    else if(op == "lu")
    {
        listAllUsers();
        return true;
    }
    else if(op == "cm")
    {
        createMeeting();
        return true;
    }
    else if(op == "la")
    {
        listAllMeetings();
        return true;
    }
    else if(op == "las")
    {
        listAllSponsorMeetings();
        return true;
    }
    else if(op == "lap")
    {
        listAllParticipateMeetings();
        return true;
    }
    else if(op == "qm")
    {
        queryMeetingByTitle();
        return true;
    }
    else if(op == "qt")
    {
        queryMeetingByTimeInterval();
        return true;
    }
    else if(op == "dm")
    {
        deleteMeetingByTitle();
        return true;
    }
    else if(op == "da")
    {
        deleteAllMeetings();
        return true;
    }
    return true;
}

void AgendaUI::userLogIn(void)
{
    string userName, password;
    cout << "[log in] [username] [password]" << endl
         << "[log in] ";
    cin >> userName >> password;
    if(m_agendaService.userLogIn(userName, password))
    {
        m_userName = userName;
        m_userPassword = password;
        cout << "[log in] success!" << endl;
        while(executeOperation(getOperation()));
    }
    else
        cout << "Password error or user doesn't exist" << endl;
}

void AgendaUI::userRegister(void)
{
    string userName, password, email, phone;
    cout << "[register] [username] [password] [email] [phone]" << endl
         << "[register] ";
    cin >> userName >> password >> email >> phone;
    if(m_agendaService.userRegister(userName, password, email, phone))
    {
        m_userName = userName;
        m_userPassword = password;
        cout << "[register] success!" << endl;
        while(executeOperation(getOperation()));
    }
    else
        cout << "This username has been registered!" << endl;
}

void AgendaUI::userLogOut(void)
{
    m_userName.clear();
    m_userPassword.clear();
}

void AgendaUI::quitAgenda(void)
{
    m_agendaService.quitAgenda();
}

void AgendaUI::deleteUser(void)
{
    m_agendaService.deleteUser(m_userName, m_userPassword);
    userLogOut();
    cout << "[delete agenda account] succeed!" << endl;
}

void AgendaUI::listAllUsers(void)
{
    list<User> users = m_agendaService.listAllUsers();
    cout << "name\t" << "email\t" << "phone" << endl;
    for(auto itr = users.begin(); itr != users.end(); ++itr)
    {
        cout << itr->getName() << "\t"
             << itr->getEmail() << "\t"
             << itr->getPhone() << endl;
    }

}

void AgendaUI::createMeeting(void)
{
    int counts;
    string participator, title, startDate, endDate;
    vector<string> temp;
    cout << "[create meeting] [the number of participrtors]" << endl
         << "[create meeting] ";
    cin >> counts;
    for(int i = 1; i <= counts; ++i)
    {
        cout << "[create meeting] [please enter the participator " << i << " ]" << endl
             << "[create meeting] ";
        cin >> participator;
        temp.push_back(participator);
    }
    cout << "[create meeting] [title][start time(yyyy-mm-dd/hh:mm)] [end time(yyyy-mm-dd/hh:mm)]" << endl
         << "[create meeting] ";
    cin >> title >> startDate >> endDate;

    if(m_agendaService.createMeeting(m_userName, title, startDate, endDate, temp))
    {
        cout << "[create meeting] succeed!" << endl;
        while(executeOperation(getOperation()));
    }
    else
        cout << "[create meeting] error!" << endl;

}
void AgendaUI::listAllMeetings(void)
{
    printMeetings(m_agendaService.listAllMeetings(m_userName));
}

void AgendaUI::listAllSponsorMeetings(void)
{
    printMeetings(m_agendaService.listAllSponsorMeetings(m_userName));
}

void AgendaUI::listAllParticipateMeetings(void)
{
    printMeetings(m_agendaService.listAllParticipateMeetings(m_userName));
}

void AgendaUI::queryMeetingByTitle(void)
{
    string title;
    cout << "[query meeting] [title]:" << endl
         << "[query meeting] ";
    cin >> title;
    printMeetings(m_agendaService.meetingQuery(m_userName, title));
}

void AgendaUI::queryMeetingByTimeInterval(void)
{
    string startDate, endDate;
    cout << "[query meeting] [start time(yyyy-mm-dd/hh:mm)] [end time(yyyy-mm-dd/hh:mm)]" << endl
         << "[query meeting] ";
    cin >> startDate >> endDate;
    cout << "[query meeting]" << endl << endl;
    printMeetings(m_agendaService.meetingQuery(m_userName, startDate, endDate));
}

void AgendaUI::deleteMeetingByTitle(void)
{
    string title;
    cout << "[delete meeting] [title]:" << endl
         << "[delete meeting] ";
    cin >> title;
    if(m_agendaService.deleteMeeting(m_userName, title))
    {
        cout << "[delete meeting] succeed!" << endl;
        while(executeOperation(getOperation()));
    }
    else
        cout << "[error] delete meeting fail!" << endl;
}

void AgendaUI::deleteAllMeetings(void)
{
    m_agendaService.deleteAllMeetings(m_userName);
    cout << "[delete all meeting] succeed!" << endl;
}

void AgendaUI::printMeetings(list<Meeting> meetings)
{
    cout << "title\t" << left << setw(15) << "sponsor" << left << setw(20) << "start time" << left << setw(20) << "end time" << "participators" << endl;
    for(auto itr = meetings.begin(); itr != meetings.end(); ++itr)
    {
        cout << itr->getTitle() << "\t"
             << left << setw(15) << itr->getSponsor()
             << left << setw(20) << Date::dateToString(itr->getStartDate())
             << left << setw(20) << Date::dateToString(itr->getEndDate());

        vector<string> temp = itr->getParticipator();
        for(int i = 0; i < temp.size(); ++i)
        {
            cout << temp[i];
            if(i != temp.size() - 1)
                cout << ",";
        }
        cout << endl;
    }
    cout << endl;
}









//#include "../include/AgendaUI.hpp"
#include "AgendaUI.cpp"
#include "AgendaService.cpp"
#include "User.cpp"
#include "Meeting.cpp"
#include "Storage.cpp"
#include "Date.cpp"

int main()
{
    AgendaUI test;
    test.OperationLoop();
    return 0;
}
