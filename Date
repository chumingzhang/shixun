#ifndef DATE_H
#define DATE_H

#include <initializer_list>
#include <string>

class Date {
 public:
  /**
  * @brief default constructor
  */
  Date();

  /**
  * @brief constructor with arguments
  */
  Date(int t_year, int t_month, int t_day, int t_hour, int t_minute);

  /**
  * @brief constructor with a string
  */
  Date(const std::string &dateString);
  /**
  * @brief return the year of a Date
  * @return   a integer indicate the year of a date
  */
  int getYear(void) const;

  /**
  * @brief set the year of a date
  * @param a integer indicate the new year of a date
  */
  void setYear(const int t_year);

  /**
  * @brief return the month of a Date
  * @return   a integer indicate the month of a date
  */
  int getMonth(void) const;

  /**
  * @brief set the month of a date
  * @param a integer indicate the new month of a date
  */
  void setMonth(const int t_month);

  /**
  * @brief return the day of a Date
  * @return   a integer indicate the day of a date
  */
  int getDay(void) const;

  /**
  * @brief set the day of a date
  * @param a integer indicate the new day of a date
  */
  void setDay(const int t_day);

  /**
  * @brief return the hour of a Date
  * @return   a integer indicate the hour of a date
  */
  int getHour(void) const;

  /**
  * @brief set the hour of a date
  * @param a integer indicate the new hour of a date
  */
  void setHour(const int t_hour);

  /**
  * @brief return the minute of a Date
  * @return   a integer indicate the minute of a date
  */
  int getMinute(void) const;

  /**
  * @brief set the minute of a date
  * @param a integer indicate the new minute of a date
  */
  void setMinute(const int t_minute);

  /**
  *   @brief check whether the date is valid or not
  *   @return the bool indicate valid or not
  */
  static bool isValid(const Date &t_date);

  /**
  * @brief convert a string to date, if the format is not correct return
  * 0000-00-00/00:00
  * @return a date
  */
  static Date stringToDate(const std::string &t_dateString);

  /**
  * @brief convert a date to string, if the date is invalid return
  * 0000-00-00/00:00
  */
  static std::string dateToString(const Date &t_date);

  /**
  *  @brief overload the assign operator
  */
  Date &operator=(const Date &t_date);

  /**
  * @brief check whether the CurrentDate is equal to the t_date
  */
  bool operator==(const Date &t_date) const;

  /**
  * @brief check whether the CurrentDate is  greater than the t_date
  */
  bool operator>(const Date &t_date) const;

  /**
  * @brief check whether the CurrentDate is  less than the t_date
  */
  bool operator<(const Date &t_date) const;

  /**
  * @brief check whether the CurrentDate is  greater or equal than the t_date
  */
  bool operator>=(const Date &t_date) const;

  /**
  * @brief check whether the CurrentDate is  less than or equal to the t_date
  */
  bool operator<=(const Date &t_date) const;

 private:
  int m_year;
  int m_month;
  int m_day;
  int m_hour;
  int m_minute;
};

#endif







#include "../include/Date.hpp"

  /**
  * @brief default constructor
  */
  Date::Date()
  {
      m_day = 0;
      m_hour = 0;
      m_minute = 0;
      m_month = 0;
      m_year = 0;
  }

  /**
  * @brief constructor with arguments
  */
  Date::Date(int t_year, int t_month, int t_day, int t_hour, int t_minute)
  {
      m_day = t_day;
      m_year = t_year;
      m_month = t_month;
      m_hour = t_hour;
      m_minute = t_minute;
  }

  /**
  * @brief constructor with a string
  */
  Date::Date(const std::string &dateString)
  {
      Date temp = Date::stringToDate(dateString);
      if(Date::isValid(temp))(*this) = temp;
      else
      {
        m_day = 0;
        m_hour = 0;
        m_minute = 0;
        m_month = 0;
        m_year = 0;
      }
  }
  /**
  * @brief return the year of a Date
  * @return   a integer indicate the year of a date
  */
  int Date::getYear(void) const
  {
    return m_year;
  }

  /**
  * @brief set the year of a date
  * @param a integer indicate the new year of a date
  */
  void Date::setYear(const int t_year)
  {
    m_year = t_year;
  }

  /**
  * @brief return the month of a Date
  * @return   a integer indicate the month of a date
  */
  int Date::getMonth(void) const
  {
    return m_month;
  }

  /**
  * @brief set the month of a date
  * @param a integer indicate the new month of a date
  */
  void Date::setMonth(const int t_month)
  {
    m_month = t_month;
  }

  /**
  * @brief return the day of a Date
  * @return   a integer indicate the day of a date
  */
  int Date::getDay(void) const
  {
    return m_day;
  }

  /**
  * @brief set the day of a date
  * @param a integer indicate the new day of a date
  */
  void Date::setDay(const int t_day)
  {
    m_day = t_day;
  }

  /**
  * @brief return the hour of a Date
  * @return   a integer indicate the hour of a date
  */
  int Date::getHour(void) const
  {
    return m_hour;
  }

  /**
  * @brief set the hour of a date
  * @param a integer indicate the new hour of a date
  */
  void Date::setHour(const int t_hour)
  {
    m_hour = t_hour;
  }

  /**
  * @brief return the minute of a Date
  * @return   a integer indicate the minute of a date
  */
  int Date::getMinute(void) const
  {
    return m_minute;
  }

  /**
  * @brief set the minute of a date
  * @param a integer indicate the new minute of a date
  */
  void Date::setMinute(const int t_minute)
  {
    m_minute = t_minute;
  }

  /**
  *   @brief check whether the date is valid or not
  *   @return the bool indicate valid or not
  */
  bool Date::isValid(const Date &t_date)
  {
    if(t_date.m_year < 1000 || t_date.m_year > 9999) return false;
    if(t_date.m_month < 1 || t_date.m_month > 12)return false;
    if(t_date.m_day < 1 || t_date.m_day > 31)return false;
    if(t_date.m_hour < 0 || t_date.m_hour > 23)return false;
    if(t_date.m_minute < 0 || t_date.m_minute > 59)return false;
    if(t_date.m_month == 2)
    {
      if((t_date.m_year % 4 == 0 && t_date.m_year % 100 != 0) || t_date.m_year % 400 == 0)
      {
        if(t_date.m_day > 29)return false;
      }
      else if(t_date.m_day > 28)return false;
    }
    if(t_date.m_month == 4 || t_date.m_month == 6 || t_date.m_month == 9 || t_date.m_month == 11)
    {
      if(t_date.m_day > 30)return false;
    }
    return true;
  }

  /**
  * @brief convert a string to date, if the format is not correct return
  * 0000-00-00/00:00
  * @return a date
  */
  Date Date::stringToDate(const std::string &t_dateString)
  {
    Date res;
    int right = 1;
    for(int i = 0; i < 16; ++i)
    {
      if(i != 4 && i != 7 && i != 10 && i != 13 && (t_dateString[i] < '0' || t_dateString[i] > '9')) right = 0;
      if((i == 4 || i == 7)&&t_dateString[i] != '-')right = 0;
      if(i == 10 && t_dateString[i] != '/')right = 0;
      if(i == 13 && t_dateString[i] != ':')right = 0;
    }
    if(right)
    {
      int time = 0;
      int i = 0;
      while(time < 5)
      {
        int total = 0;
        for(; t_dateString[i] <= '9' && t_dateString[i] >= '0' && i < 16; i++)
        {
          total = total * 10 + t_dateString[i] - '0';
        }
        ++i;
        switch(time)
        {
          case 0:
            res.m_year = total;
            break;
          case 1:
            res.m_month = total;
            break;
          case 2:
            res.m_day = total;
            break;
          case 3:
            res.m_hour = total;
            break;
          case 4:
            res.m_minute = total;
            break;
        }
        ++time;
      }
    }
    else
    {
      res.m_year = 0;
      res.m_month = 0;
      res.m_day = 0;
      res.m_hour = 0;
      res.m_minute = 0;
    }
    return res;
  }

  /**
  * @brief convert a date to string, if the date is invalid return
  * 0000-00-00/00:00
  */
  int sqr(int time){
    int res = 1;
    for(int i = 0; i < time; ++i)
    {
      res *= 10;
    }
    return res;
  }
  std::string Date::dateToString(const Date &t_date)
  {
    std::string res;
    if(Date::isValid(t_date))
    {
      int year = t_date.m_year;
      int month = t_date.m_month;
      int day = t_date.m_day;
      int hour = t_date.m_hour;
      int minute = t_date.m_minute;
      for(int i = 0; i < 4; ++i)
      {
        res += (year / sqr(3 - i) + '0');
        year = year % sqr(3 - i);
      }
      res += '-';
      for(int i = 0; i < 2; ++i)
      {
        res += (month / sqr(1 - i) + '0');
        month = month % sqr(1 - i);
      }
      res += '-';
      for(int i = 0; i < 2; ++i)
      {
        res += (day / sqr(1 - i) + '0');
        day = day % sqr(1 - i);
      }
      res += '/';
      for(int i = 0; i < 2; ++i)
      {
        res += (hour / sqr(1 - i) + '0');
        hour = hour % sqr(1 - i);
      }
      res += ':';
      for(int i = 0; i < 2; ++i)
      {
        res += (minute / sqr(1 - i) + '0');
        minute = minute % sqr(1 - i);
      }
    }
    else
    {
      res = "0000-00-00/00:00";
    }

    return res;
  }

  /**
  *  @brief overload the assign operator
  */
  Date & Date::operator=(const Date &t_date)
  {
    m_year = t_date.m_year;
    m_month = t_date.m_month;
    m_day = t_date.m_day;
    m_hour =t_date.m_hour;
    m_minute = t_date.m_minute;
    return (*this);
  }

  /**
  * @brief check whether the CurrentDate is equal to the t_date
  */
  bool Date::operator==(const Date &t_date) const
  {
    if(m_year == t_date.m_year && m_month == t_date.m_month && m_day == t_date.m_day && m_hour == t_date.m_hour && m_minute == t_date.m_minute)return true;
    else return false;
  }

  /**
  * @brief check whether the CurrentDate is  greater than the t_date
  */
  bool Date::operator>(const Date &t_date) const
  {
    if(m_year > t_date.m_year)return true;
    else if(m_year == t_date.m_year)
    {
      if(m_month > t_date.m_month)return true;
      else if(m_month == t_date.m_month)
      {
        if(m_day > t_date.m_day)return true;
        else if(m_day == t_date.m_day)
        {
          if(m_hour > t_date.m_hour)return true;
          else if(m_hour == t_date.m_hour)
          {
            if(m_minute > t_date.m_minute)return true;
          }
        }
      }
    }
    return false;
  }

  /**
  * @brief check whether the CurrentDate is  less than the t_date
  */
  bool Date::operator<(const Date &t_date) const
  {
    if(m_year < t_date.m_year)return true;
    else if(m_year == t_date.m_year)
    {
      if(m_month < t_date.m_month)return true;
      else if(m_month == t_date.m_month)
      {
        if(m_day < t_date.m_day)return true;
        else if(m_day == t_date.m_day)
        {
          if(m_hour < t_date.m_hour)return true;
          else if(m_hour == t_date.m_hour)
          {
            if(m_minute < t_date.m_minute)return true;
          }
        }
      }
    }
    return false;
  }

  /**
  * @brief check whether the CurrentDate is  greater or equal than the t_date
  */
  bool Date::operator>=(const Date &t_date) const
  {
    if(m_year > t_date.m_year)return true;
    else if(m_year == t_date.m_year)
    {
      if(m_month > t_date.m_month)return true;
      else if(m_month == t_date.m_month)
      {
        if(m_day > t_date.m_day)return true;
        else if(m_day == t_date.m_day)
        {
          if(m_hour > t_date.m_hour)return true;
          else if(m_hour == t_date.m_hour)
          {
            if(m_minute >= t_date.m_minute)return true;
          }
        }
      }
    }
    return false;
  }

  /**
  * @brief check whether the CurrentDate is  less than or equal to the t_date
  */
  bool Date::operator<=(const Date &t_date) const
  {
    if(m_year < t_date.m_year)return true;
    else if(m_year == t_date.m_year)
    {
      if(m_month < t_date.m_month)return true;
      else if(m_month == t_date.m_month)
      {
        if(m_day < t_date.m_day)return true;
        else if(m_day == t_date.m_day)
        {
          if(m_hour < t_date.m_hour)return true;
          else if(m_hour == t_date.m_hour)
          {
            if(m_minute <= t_date.m_minute)return true;
          }
        }
      }
    }
    return false;
  }
